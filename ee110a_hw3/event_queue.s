;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
;                               event_queue.s                                ;
;                Basic event queue implementation (as a stack)               ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; This file implements a basic event queue as a stack.  It is used to
; store events that are generated by the demo. The functions defined in
; this file are:
;    EnqueueEvent - adds an event to the queue
;
; The two memory allocations in this file are:
;    QueueBuffer - the actual queue
;    QueueIndex - the index of the next available slot in the queue
; 
; Revision History:
;     11/7/23  Adam Krivka      initial revision


; local include files
    .include "keypad_demo_symbols.inc"
    .include "macros.inc"
    .include "constants.inc"

; export functions defined in this file
    .def EnqueueEvent

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; MEMORY
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    .data

; QueueBuffer - the actual queue
QueueBuffer: .space    QUEUE_SIZE

; QueueIndex - the index of the next available slot in the queue
QueueIndex: .uword 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; CODE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    .text

; EnqueueEvent
;
; Description:            Enqueues an event to the event queue
;
; Inputs:                R0 - event to enqueue
; Outputs:                None.
;
; Local Variables:         None.
; Shared Variables:     None.
; Global Variables:     QueueBuffer, QueueIndex.
;
; Error Handling:         None.
;
; Registers Changed:    flags, R0, R1, R2, R3
; Stack Depth:             0 word
;
; Algorithms:             None.
; Data Structures:         Stack
;
; Revision History:     11/7/23  Adam Krivka      initial revision

EnqueueEvent:
    ; load QueueIndex address and value
    MOVA     R2, QueueIndex 
    LDR        R3, [R2] 

    ; check if stack is full
    CMP        R3, #QUEUE_SIZE
    BEQ        EnqueueEventFail         ; if yes return a fail value

    ; load QueueBuffer address
    MOVA     R1, QueueBuffer 

    ; write event (passed in R0) to stack
    STR        R0, [R1, R3, LSL #TIMES_FOUR_LEFT_SHIFT]

    ; increment QueueIndex and store in memory
    ADD        R3, #1
    STR        R3, [R2]

    ;B        EnqueueEventSuccess        ; return success value

EnqueueEventSuccess:
    MOV32    R0, FUNCTION_CALL_SUCCESS
    B        EnqueueEventDone

EnqueueEventFail:
    MOV32    R0, FUNCTION_CALL_FAIL
    ;B        EnqueueEventDone

EnqueueEventDone:
    BX         LR
