EE 110 HW6 Code Outline

Overview:
	I want to start getting close to how my robot is going to work.
	I don't think I'm going to do Glen's design of having the controller
	board you hold in your hand be the server and control several client
	servo boards. I think I'm going to have the robot have a single board
	that is the server and the controller board be a client (sort of like 
	a phone that you connect to the robot that's the peripheral). Then also
	the robot holds the database and I can use it in some ditch day puzzles.
	(The robot will be Wall-E but for now I'm calling him just "robot" because
	I don't want to accidentally tell a frosh that I'm working on Wall-E.)
	
	For this homework, I thought about having the keypad+LCD board be the client
	and the standalone board be the server (a barebones robot, a "barebot"). 
	The keypad board will send requests to the server board to change some 
	characteristic, get a value back, and display it on the LCD. 

Server Code ("robot" board):
	GATT database:
		Service:
			Name: BarebotProfile
			Characteristics:
				Speed: int (how fast is the robot going), READ|WRITE
				Turn: int (how much it's turning left or right), READ|WRITE
				Thoughts: string (what are [robot]'s thoughts, >40 chars), READ|WRITE
	
	| barebot_peripheral.c |
	BarebotPeripheral_createTask:
		creates a Task with BarebotPeripheral_taskFxn
	
	BarebotPeripheral_init:
		registers app with ICall
		initializes message queue
		initializes GAP and sets some parameters
		initializes a GATT server and creates services 
			1. Device Information service
			2. BarebotProfile service (defined in the syscfg, from generated code)
			
	BarebotPeripheral_taskFxn:
		BarebotPeripheral_init()
		loop:
			pend on queue event
			based on event ID:
				a. BarebotPeripheral_processStackMsg(...)
				b. BarebotPeripheral_processAppMsg(...)
	
	BarebotPeripheral_processStackMsg:
		based on event type:
			GAP:
				BarebotPeripheral_processGapMessage(...)
			GATT:
				don't do anything
			HCI:
				if error -> spin
	
	BarebotPeripheral_processGapMessage:
		based on opcode:
			GAP_DEVICE_INIT_DONE_EVENT:
				start advertising (use two advertising settings, one normal
				and one long-range)
			GAP_LINK_ESTABLISHED_EVENT:
				save connection handle
				disable advertising
			GAP_LINK_TERMINATED_EVENT:
				remove connection handle:
				start advertising again
	
	BarebotPeripheral_processAppMsg:
		(this was a message queue event generated by us)
		BS_CHAR_CHANGE_EVT:
			(GATT char. value changed, this event was queued by us
			from BarebotPeripheral_charValueChangeCB)
			BarebotPeripheral_processCharValueChangeEvt(...)
		BS_ADV_EVT:
			(advertising event, queued by us from BarebotPeripheral_advCallback)
			BarebotPeripheral_processAdvEvent(...)
	
	BarebotPeripheral_charValueChangeCB:
		enqueue BB_CHAR_CHANGE_EVT to the message queue with the parameter ID as data
		
	BarebotPeripheral_processCharValueChangeEvt:
		(since our server board isn't connected to any peripherals just yet,
		we can't do much with the values in our GATT database, but maybe
		if BAREBOTPROFILE_SPEED or BAREBOTPROFILE_TURN is greater than zero
		or some other value, one of the LEDs can light up)
	
	BarebotPeripheral_advCallback:
		enqueue BS_ADV_EVT event to the message queue
	
	BarebotPeripheral_processAdvEvent:
		do nothing, just free event (if it wasn't GAP_EVT_INSUFFICIENT_MEMORY)
	
	BarebotPeripheral_enqueueMsg:
		malloc space for message
		Util_enqueueMsg(...)
	
	BarebotPeripheral_spin:
		while(true);
		
	| barebot_gatt_profile.c |
	(These functions are specified as Read and Write callbacks in the syscfg.
	Contrary to what Glen said in lecture, they are actually necessary for the
	code to work)
	
	barebot_ReadAttrCB:
		return attribute value in the pValue argument passed to the function
		
	barebot_WriteAttrCB:
		update attribute value in pAttr->pValue 
		let the perihperal know with BarebotPeripheral_charValueChangeCB(changeID)
		
	| barebot_server_demo.c |
	(main loop)
	init power, clocks, and GPIO
	ICall init
	set clock tick
	BarebotPeripheral_createTask()
	BIOS_start()
			
Client Code (keypad+LCD board):
	| barebot_peripheral.c |
	BarebotCentral_createTask:
		creates a Task with BarebotCentral_taskFxn
	
	BarebotCentral_init:
		registers app with ICall
		initializes message queue
		initializes GAP and sets some parameters
		initializes a GATT client
			
	BarebotCentral_taskFxn:
		BarebotCentral_init()
		loop:
			pend on queue event
			based on event ID:
				a. BarebotCentral_processStackMsg(...)
				b. BarebotCentral_processAppMsg(...)
	
	BarebotCentral_processStackMsg:
		based on event type:
			GAP:
				BarebotCentral_processGapMessage(...)
			GATT:
				don't do anything
			HCI:
				if error -> spin
	
	BarebotCentral_processGapMessage:
		based on opcode:
			GAP_DEVICE_INIT_DONE_EVENT:
				register BarebotCentral_scanCb as scanning callback
				set scanning parameters
				start scanning (GapScan_enable)
			GAP_LINK_ESTABLISHED_EVENT:
				save connection handle
				disable scanning
			GAP_LINK_TERMINATED_EVENT:
				remove connection handle
				start scanning again
	
	BarebotCentral_scanCb:
		based on event:
			GAP_EVT_ADV_REPORT
				enqueue BC_EVT_ADV_REPORT to message queue
			ignore others
				
	BarebotCentral_processAppMsg:
		(this was a message queue event generated by us)
		based on event:
			BC_EVT_ADV_REPORT:
				GapScan_getAdvReport(...)
				GapInit_connect(...) (should throw us into GAP_LINK_ESTABLISHED_EVENT)
			BC_EVT_KEY_PRESED:
				if col is:
					0:
						if row is 1, GATT write to SPEED_UP characteristic
						if row is 0, GATT write to SPEED_DOWN characteristic
						
						GATT notify SPEED
						Display(...)
					1:
						ditto but with TURN
					2:
						if row is 0:
							GATT read THOUGHTS
							Display(...)
	
	BarebotCentral_keyPressed (aliased to KeyPressed):
		enqueue BC_EVT_KEY_PRESED event with the row and column
	
	BarebotCentral_doGattRead(uuid):
		GATT_ReadUsingCharUUID(uuid)
	
	BarebotCentral_doGattWrite(uuid):
		GATT_FindHandleUUID(uuid)
		GATT_WriteCharValue(...)
	
	BarebotCentral_enqueueMsg:
		malloc space for message
		Util_enqueueMsg(...)
	
	BarebotCentral_spin:
		while(true);
		
	| keypad/ |
		scanning and deboucning code which calls KeyPressed function when registered
	
	| lcd/ |
		same LCD code
		
	| barebot_client_demo.c |
	(main loop)
	disable hardware interrupts
	
	init power, clocks, and GPIO
	ICall init
	set clock tick
	init keypad
	init LCD
	BarebotCentral_createTask()
	
	enable hardware interrupts
	BIOS_start()
	
Plan
	1. Get central code to read and display SPEED
		a. get central code to compile
		b. write scanning code
		c. do a gatt read on connection and display result
		
		
finishing up:
1. switch to using clock
2. give notifications another try
3. ditch thoughts
4. GATT writing instead
